package com.dianping.cat.system.page.abtest;

import java.util.List;

import org.eclipse.jdt.core.dom.AST;
import org.eclipse.jdt.core.dom.ASTParser;
import org.eclipse.jdt.core.dom.ASTVisitor;
import org.eclipse.jdt.core.dom.CompilationUnit;
import org.eclipse.jdt.core.dom.FieldDeclaration;
import org.eclipse.jdt.core.dom.IExtendedModifier;
import org.eclipse.jdt.core.dom.TypeDeclaration;
import org.unidal.lookup.annotation.Inject;

import com.dianping.cat.home.abtest.groupstrategy.entity.Field;
import com.dianping.cat.home.abtest.groupstrategy.entity.GroupstrategyDescriptor;

public class GroupStrategyParser {

	// /xxxx
	@Inject("package")
	private static String s_package = "package";

	@Inject("class")
	private static String s_class = "class";

	@Inject("inject")
	private static String s_annotation = "@Inject";

	public static GroupstrategyDescriptor parse(String javaSource) {
		final GroupstrategyDescriptor descriptor = new GroupstrategyDescriptor();
		ASTParser parser = ASTParser.newParser(AST.JLS3);
		
		parser.setSource(javaSource.toCharArray());
		// parser.setResolveBindings(true);
		final CompilationUnit result = (CompilationUnit) parser.createAST(null);

		TypeDeclaration type = (TypeDeclaration) result.types().get(0);
		
		String name = type.getName().getFullyQualifiedName();
		descriptor.setName(name);
		descriptor.setFullyQualifiedName(result.getPackage().getName().getFullyQualifiedName() + "." + name);

		result.accept(new ASTVisitor() {
			public boolean visit(FieldDeclaration node) {
				@SuppressWarnings("unchecked")
				List<IExtendedModifier> modifiers = node.modifiers();
				
				for (IExtendedModifier mod : modifiers) {
					if (mod.isAnnotation()) {
						String annotation = mod.toString();

						int index = annotation.indexOf("@Inject");
						if (index >= 0) {
							int begin = annotation.indexOf('"');
							int end = annotation.lastIndexOf('"');
							
							String name = annotation.substring(begin + 1, end).trim();
							String type = node.getType().toString();
							Field field = new Field();
							
							field.setName(name);
							field.setType(type);
							
							descriptor.getFields().add(field);
						}
					}
				}
				return true;
			}
		});

		return descriptor;
	}
}
